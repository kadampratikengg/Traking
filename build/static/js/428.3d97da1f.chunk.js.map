{"version":3,"file":"static/js/428.3d97da1f.chunk.js","mappings":"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","sources":["pages/Hire.js","services/toasterService.js"],"sourcesContent":["import { useForm } from 'react-hook-form';\nimport { TextField, Button, Grid, Container, Typography } from '@mui/material';\nimport { useDropzone } from 'react-dropzone';\nimport { styled } from '@mui/system';\nimport { hrService } from '../services/hrService'\nimport { toastService } from '../services/toasterService'\nimport React, { useState, useCallback } from 'react';\n\n\nconst CustomTextField = styled(TextField)(({ theme }) => ({\n    backgroundColor: 'white',\n  }));\n\n\nfunction Hire() {\n    const { handleSubmit, register, formState: { errors },\n    } = useForm();\n    const [, setSelectedFile] = useState(null);\n\n\n    const onDrop = useCallback((acceptedFiles) => {\n        setSelectedFile(acceptedFiles[0]);\n    }, []);\n\n    useDropzone({\n        onDrop,\n        accept: '.jpg,.png,.pdf',\n    });\n\n    const onSubmit = async (data) => {\n        const response = await hrService.addPosition(data);\n        if(response){\n            toastService.success('published requirement')\n        }\n    };\n\n    return (\n        <Container>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <Container>\n                    <Typography variant='h5' sx={{ mb: 1 }}>\n                        Publish Requirement\n                    </Typography>\n                    <Grid container spacing={3} >\n                        <Grid item xs={12}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={6} >\n                                    <CustomTextField\n                                        name=\"qualification\"\n                                        label=\"Qualification\"\n                                        fullWidth\n                                        {...register(\"qualification\", { required: true })}\n                                        error={!!errors?.product}\n                                        helperText={errors?.product && 'qualification is required'}\n                                    />\n                                </Grid>\n                                <Grid item xs={6} >\n                                    <CustomTextField\n                                        name=\"skills\"\n                                        label=\"Skills\"\n                                        fullWidth\n                                        {...register(\"skills\", { required: true })}\n                                        error={!!errors?.product}\n                                        helperText={errors?.product && 'skills are required'}                                    />\n                                </Grid>\n\n                                <Grid item xs={12} sm={6}>\n                                    <CustomTextField\n                                        name=\"positions\"\n                                        label=\"No of positions\"\n                                        fullWidth\n                                        {...register(\"noOfPosition\", { required: true })}\n                                        error={!!errors?.product}\n                                        helperText={errors?.product && 'positions are required'}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <CustomTextField\n                                        name=\"lastDate\"\n                                        label=\"Last-Date\"\n                                        fullWidth\n                                        type=\"date\"\n                                        {...register(\"lastDate\", { required: true })}\n                                        error={!!errors?.product}\n                                        helperText={errors?.product && 'Last Date is required'}\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <CustomTextField\n                                        name=\"experience\"\n                                        label=\"Experience\"\n                                        fullWidth\n                                        {...register(\"experience\", { required: true })}\n                                        error={!!errors?.product}\n                                        helperText={errors?.product && 'experience is required'}\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <CustomTextField\n                                        name=\"criteria\"\n                                        label=\"Criteria\"\n                                        multiline\n                                        rows={2}\n                                        fullWidth\n                                        {...register(\"Note\")}\n                                    />\n                                </Grid>\n                                <Grid item xs={9} sx={{ display: 'flex', alignItems: 'center' }}>\n                                    {/* <Typography>\n                                        Or upload .csv file and submit button at bottom\n                                    </Typography> */}\n                                </Grid>\n                                <Grid item xs={3} sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                                    <Button type=\"submit\" variant=\"contained\" sx={{ backgroundColor: \"rgb(24, 144, 255)\" }}>\n                                        Submit\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </form>\n        </Container>\n    );\n}\n\nexport default Hire;\n","import { toast } from 'react-toastify';\n\nconst success = (msg) =>{\n    toast.success(msg);\n}\n\nconst error = (msg) =>{\n    toast.error(msg);\n}\n\nexport const toastService = {\n    success,\n    error\n}"],"names":["CustomTextField","styled","TextField","_ref","theme","backgroundColor","_useForm","useForm","handleSubmit","register","errors","formState","_useState","useState","setSelectedFile","_slicedToArray","onDrop","useCallback","acceptedFiles","useDropzone","accept","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","hrService","sent","toastService","stop","_x","apply","arguments","_jsx","Container","children","_jsxs","Typography","variant","sx","mb","Grid","container","spacing","item","xs","_objectSpread","name","label","fullWidth","required","error","product","helperText","sm","type","multiline","rows","display","alignItems","justifyContent","Button","success","msg","toast"],"sourceRoot":""}