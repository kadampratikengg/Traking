{"version":3,"file":"static/js/819.2d4c0c9f.chunk.js","mappings":"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","sources":["pages/ChangePassword.js","services/toasterService.js","services/userService.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { userService } from '../services/userService';\nimport { toastService } from '../services/toasterService';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { update } from '../store/reducers/user.js'\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\n\n// material-ui\nimport {\n    Grid,\n    Button,\n    Typography,\n    Container,\n    Box,\n    Paper,\n    TextField,\n    Divider\n} from '@mui/material';\nimport { useParams } from 'react-router-dom';\n\nimport { remove } from '../store/reducers/user'\n\nfunction useMUI(useFormObject) {\n    const register = (name, options) => ({\n        ...useFormObject.register(name, options),\n        InputLabelProps: { shrink: !!useFormObject.watch(name) }\n    });\n    return {\n        ...useFormObject,\n        register\n    };\n}\n\n\nconst UserForm = ({ userId, handleClose }) => {\n    const isFullWidth = useMediaQuery((theme) => theme.breakpoints.down(\"sm\"));\n\n    const [user, setUser] = useState({});\n    const currentUser = useSelector((state) => state.user.user);\n    const dispatch = useDispatch();\n\n\n    const params = useParams();\n\n    const { handleSubmit, register, formState: { errors }, watch, control, reset } = useMUI(useForm({\n        mode: \"onChange\"\n    }));\n\n    const onSubmit = async (data) => {\n        const response = await userService.updatePassword(params.id, data);\n        if (response) {\n            toastService.success('password updated successfully');\n            dispatch(remove())\n        }\n        // You can perform further actions here, like submitting data to an API\n    };\n\n    return (\n        <>\n            <Container>\n                <Paper sx={{\n                    m: 0,\n                    px: 2,\n                    py: 2,\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                    justifyContent: 'space-evenly',\n                    borderRadius: \"6px\"\n                }} elevation={0}>\n                    <Grid container spacing={2}>\n                        <Grid item md=\"6\">\n                            <Box>\n                                <Typography variant=\"h6\" color='primary'>UPDATE PASSWORD</Typography>\n                            </Box>\n                            <form style={{ marginTop: 4 }} onSubmit={handleSubmit(onSubmit)} noValidate>\n                                <TextField\n                                    sx={{ mt: 2 }}\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    fullWidth\n                                    name=\"oldPassword\"\n                                    label=\"old password\"\n                                    type=\"password\"\n                                    id=\"oldPassword\"\n                                    {...register(\"oldPassword\", {\n                                        required: true\n                                    })}\n                                    size=\"small\"\n                                    error={!!errors?.oldPassword}\n                                    helperText={errors?.oldPassword && 'Old password is required'}\n                                />\n                                <Divider sx={{ mt: 1 }}></Divider>\n                                <TextField\n                                    sx={{ mt: 2 }}\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    // required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    {...register(\"password\", {\n                                        required: 'password is required',\n                                        minLength: {\n                                            value: 8,\n                                            message: 'Password must be at least 8 characters long',\n                                        },\n                                        pattern: {\n                                            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).*$/,\n                                            message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character',\n                                        }\n                                    })}\n                                    size=\"small\"\n                                    error={!!errors?.password}\n                                    helperText={errors?.password && errors.password.message}\n                                />\n                                <TextField\n                                    sx={{ mt: 2 }}\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    fullWidth\n                                    name=\"cpassword\"\n                                    label=\"confirm password\"\n                                    type=\"password\"\n                                    id=\"cpassword\"\n                                    {...register(\"cpassword\", {\n                                        required: \"password is required\",\n                                        validate: (value) => value === watch(\"password\") || \"Passwords do not match\"\n                                    })}\n                                    size=\"small\"\n                                    error={!!errors.cpassword}\n                                    helperText={errors.cpassword && errors.cpassword.message}\n                                />\n                                <Box sx={{ display: 'flex', justifyContent: \"right\" }}>\n                                    <Button\n                                        type=\"submit\"\n                                        fullWidth={isFullWidth}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        sx={{ mt: 2 }}\n                                        justify=\"flex-end\"\n                                    >\n                                        Update\n                                    </Button>\n                                </Box>\n                            </form>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Container>\n        </>\n    );\n};\n\n\n\nexport default UserForm;","import { toast } from 'react-toastify';\n\nconst success = (msg) =>{\n    toast.success(msg);\n}\n\nconst error = (msg) =>{\n    toast.error(msg);\n}\n\nexport const toastService = {\n    success,\n    error\n}","import { del, get, patch, post } from './http/httpMethods'\nimport { toastService } from '../services/toasterService'\n\n\nfunction addPosition(payload) {\n    return post('/hire', payload).then((response) => {\n        return response;\n    }).catch((err) => console.log(err));\n}\n\nfunction getUsers(query) {\n    return get(`/user${query ? `?search=${query}` : ``}`).then((response) => {\n        return response;\n    })\n}\n\nfunction getUser(userId) {\n    return get(`/user/${userId}`).then((response) => {\n        return response;\n    })\n}\n\nfunction updateUser(userId,payload) {\n    return patch(`/user/${userId}`,payload).then((response) => {\n        return response;\n    })\n}\n\nfunction updatePassword(userId,payload){\n    return patch(`/user/password/${userId}`,payload).then((response) => {\n        return response;\n    }).catch((err)=>{\n        console.log(err);\n        if(err.response.data.code<500){\n            toastService.error(err.response.data.message);\n        }else{\n            toastService.error(\"Something went wrong\");\n        }\n\n    })\n}\n\nfunction updateProfile(userId,payload) {\n    return patch(`/user/profile-picture/${userId}`,payload).then((response) => {\n        return response;\n    })\n}\n\nfunction removeProfilePicture(userId) {\n    return del(`/user/profile-picture/${userId}`).then((response) => {\n        return response;\n    })\n}\n\nexport const userService = {\n    addPosition,\n    getUsers,\n    getUser,\n    updateUser,\n    updateProfile,\n    updatePassword,\n    removeProfilePicture\n}"],"names":["_ref","userId","handleClose","useFormObject","isFullWidth","useMediaQuery","theme","breakpoints","down","_useState","useState","_useState2","_slicedToArray","dispatch","useSelector","state","user","useDispatch","params","useParams","_useMUI","useForm","mode","_objectSpread","register","name","options","InputLabelProps","shrink","watch","handleSubmit","errors","formState","onSubmit","control","reset","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","userService","id","sent","toastService","remove","stop","_x","apply","arguments","_jsx","_Fragment","children","Container","Paper","sx","m","px","py","display","flexDirection","alignItems","justifyContent","borderRadius","elevation","Grid","container","spacing","_jsxs","item","md","Box","Typography","variant","color","style","marginTop","noValidate","TextField","mt","margin","fullWidth","label","type","required","size","error","oldPassword","helperText","Divider","minLength","value","message","pattern","password","validate","cpassword","Button","justify","success","msg","toast","addPosition","payload","post","then","response","catch","err","console","log","getUsers","query","get","concat","getUser","updateUser","patch","updateProfile","updatePassword","code","removeProfilePicture","del"],"sourceRoot":""}